// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/UsefulForMe/go-ecommerce/services (interfaces: FirebaseAuthService)

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	auth "firebase.google.com/go/auth"
	errs "github.com/UsefulForMe/go-ecommerce/errs"
	gomock "github.com/golang/mock/gomock"
)

// MockFirebaseAuthService is a mock of FirebaseAuthService interface.
type MockFirebaseAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseAuthServiceMockRecorder
}

// MockFirebaseAuthServiceMockRecorder is the mock recorder for MockFirebaseAuthService.
type MockFirebaseAuthServiceMockRecorder struct {
	mock *MockFirebaseAuthService
}

// NewMockFirebaseAuthService creates a new mock instance.
func NewMockFirebaseAuthService(ctrl *gomock.Controller) *MockFirebaseAuthService {
	mock := &MockFirebaseAuthService{ctrl: ctrl}
	mock.recorder = &MockFirebaseAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebaseAuthService) EXPECT() *MockFirebaseAuthServiceMockRecorder {
	return m.recorder
}

// VerifyIDToken mocks base method.
func (m *MockFirebaseAuthService) VerifyIDToken(arg0 string) (*auth.Token, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", arg0)
	ret0, _ := ret[0].(*auth.Token)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockFirebaseAuthServiceMockRecorder) VerifyIDToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockFirebaseAuthService)(nil).VerifyIDToken), arg0)
}
